// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_GetPosts_FullMethodName       = "/go_1C.Service/GetPosts"
	Service_CreatePost_FullMethodName     = "/go_1C.Service/CreatePost"
	Service_EditPost_FullMethodName       = "/go_1C.Service/EditPost"
	Service_DeletePost_FullMethodName     = "/go_1C.Service/DeletePost"
	Service_LikePost_FullMethodName       = "/go_1C.Service/LikePost"
	Service_DislikePost_FullMethodName    = "/go_1C.Service/DislikePost"
	Service_GetComments_FullMethodName    = "/go_1C.Service/GetComments"
	Service_CreateComment_FullMethodName  = "/go_1C.Service/CreateComment"
	Service_EditComment_FullMethodName    = "/go_1C.Service/EditComment"
	Service_DeleteComment_FullMethodName  = "/go_1C.Service/DeleteComment"
	Service_LikeComment_FullMethodName    = "/go_1C.Service/LikeComment"
	Service_DislikeComment_FullMethodName = "/go_1C.Service/DislikeComment"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetPosts(ctx context.Context, in *GetPostsReq, opts ...grpc.CallOption) (*GetPostsRsp, error)
	CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostRsp, error)
	EditPost(ctx context.Context, in *EditPostReq, opts ...grpc.CallOption) (*EditPostRsp, error)
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostRsp, error)
	LikePost(ctx context.Context, in *LikePostReq, opts ...grpc.CallOption) (*LikePostRsp, error)
	DislikePost(ctx context.Context, in *DislikePostReq, opts ...grpc.CallOption) (*DislikePostRsp, error)
	GetComments(ctx context.Context, in *GetCommentsReq, opts ...grpc.CallOption) (*GetCommentsRsp, error)
	CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRsp, error)
	EditComment(ctx context.Context, in *EditCommentReq, opts ...grpc.CallOption) (*EditCommentRsp, error)
	DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentRsp, error)
	LikeComment(ctx context.Context, in *LikeCommentReq, opts ...grpc.CallOption) (*LikeCommentRsp, error)
	DislikeComment(ctx context.Context, in *DislikeCommentReq, opts ...grpc.CallOption) (*DislikeCommentRsp, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetPosts(ctx context.Context, in *GetPostsReq, opts ...grpc.CallOption) (*GetPostsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostsRsp)
	err := c.cc.Invoke(ctx, Service_GetPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostRsp)
	err := c.cc.Invoke(ctx, Service_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) EditPost(ctx context.Context, in *EditPostReq, opts ...grpc.CallOption) (*EditPostRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditPostRsp)
	err := c.cc.Invoke(ctx, Service_EditPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePostRsp)
	err := c.cc.Invoke(ctx, Service_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LikePost(ctx context.Context, in *LikePostReq, opts ...grpc.CallOption) (*LikePostRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikePostRsp)
	err := c.cc.Invoke(ctx, Service_LikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DislikePost(ctx context.Context, in *DislikePostReq, opts ...grpc.CallOption) (*DislikePostRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DislikePostRsp)
	err := c.cc.Invoke(ctx, Service_DislikePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetComments(ctx context.Context, in *GetCommentsReq, opts ...grpc.CallOption) (*GetCommentsRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsRsp)
	err := c.cc.Invoke(ctx, Service_GetComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateComment(ctx context.Context, in *CreateCommentReq, opts ...grpc.CallOption) (*CreateCommentRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentRsp)
	err := c.cc.Invoke(ctx, Service_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) EditComment(ctx context.Context, in *EditCommentReq, opts ...grpc.CallOption) (*EditCommentRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCommentRsp)
	err := c.cc.Invoke(ctx, Service_EditComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentRsp)
	err := c.cc.Invoke(ctx, Service_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) LikeComment(ctx context.Context, in *LikeCommentReq, opts ...grpc.CallOption) (*LikeCommentRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeCommentRsp)
	err := c.cc.Invoke(ctx, Service_LikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DislikeComment(ctx context.Context, in *DislikeCommentReq, opts ...grpc.CallOption) (*DislikeCommentRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DislikeCommentRsp)
	err := c.cc.Invoke(ctx, Service_DislikeComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	GetPosts(context.Context, *GetPostsReq) (*GetPostsRsp, error)
	CreatePost(context.Context, *CreatePostReq) (*CreatePostRsp, error)
	EditPost(context.Context, *EditPostReq) (*EditPostRsp, error)
	DeletePost(context.Context, *DeletePostReq) (*DeletePostRsp, error)
	LikePost(context.Context, *LikePostReq) (*LikePostRsp, error)
	DislikePost(context.Context, *DislikePostReq) (*DislikePostRsp, error)
	GetComments(context.Context, *GetCommentsReq) (*GetCommentsRsp, error)
	CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRsp, error)
	EditComment(context.Context, *EditCommentReq) (*EditCommentRsp, error)
	DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentRsp, error)
	LikeComment(context.Context, *LikeCommentReq) (*LikeCommentRsp, error)
	DislikeComment(context.Context, *DislikeCommentReq) (*DislikeCommentRsp, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) GetPosts(context.Context, *GetPostsReq) (*GetPostsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedServiceServer) CreatePost(context.Context, *CreatePostReq) (*CreatePostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedServiceServer) EditPost(context.Context, *EditPostReq) (*EditPostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedServiceServer) DeletePost(context.Context, *DeletePostReq) (*DeletePostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedServiceServer) LikePost(context.Context, *LikePostReq) (*LikePostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedServiceServer) DislikePost(context.Context, *DislikePostReq) (*DislikePostRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikePost not implemented")
}
func (UnimplementedServiceServer) GetComments(context.Context, *GetCommentsReq) (*GetCommentsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedServiceServer) CreateComment(context.Context, *CreateCommentReq) (*CreateCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedServiceServer) EditComment(context.Context, *EditCommentReq) (*EditCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedServiceServer) DeleteComment(context.Context, *DeleteCommentReq) (*DeleteCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedServiceServer) LikeComment(context.Context, *LikeCommentReq) (*LikeCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (UnimplementedServiceServer) DislikeComment(context.Context, *DislikeCommentReq) (*DislikeCommentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DislikeComment not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetPosts(ctx, req.(*GetPostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreatePost(ctx, req.(*CreatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_EditPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).EditPost(ctx, req.(*EditPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LikePost(ctx, req.(*LikePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DislikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DislikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DislikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DislikePost(ctx, req.(*DislikePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetComments(ctx, req.(*GetCommentsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateComment(ctx, req.(*CreateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_EditComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).EditComment(ctx, req.(*EditCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteComment(ctx, req.(*DeleteCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_LikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).LikeComment(ctx, req.(*LikeCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DislikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikeCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DislikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DislikeComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DislikeComment(ctx, req.(*DislikeCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_1C.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPosts",
			Handler:    _Service_GetPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Service_CreatePost_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _Service_EditPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Service_DeletePost_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _Service_LikePost_Handler,
		},
		{
			MethodName: "DislikePost",
			Handler:    _Service_DislikePost_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Service_GetComments_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Service_CreateComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _Service_EditComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Service_DeleteComment_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _Service_LikeComment_Handler,
		},
		{
			MethodName: "DislikeComment",
			Handler:    _Service_DislikeComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/server.proto",
}
